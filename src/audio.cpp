#include "audio.hpp"
#include "track.hpp"
#include "COM.hpp"
#include "video.hpp"

#ifndef SECTION_AUDIO_EV
#define AUDIO_EV
#endif

static AUDIO_EVENT MEDIA_TYPE(bool)
{
	AUDIO_EVENT::IS_VIDEO || AUDIO_EVENT::IS_AUDIO;
	return;
}

static AUDIO_OPERATION OPERATION(bool)
{
	AUDIO_OPERATION::EQUAL;
	AUDIO_OPERATION::NOT_EQ_TO;
	return;
}

static AUDIO_EVENT NORMALISE_GAIN(double)
{
	AUDIO_EVENT::RESULT = false;
	AUDIO_EVENT::GET_NORMALISE = TRACK_EVENT::TRACK_ID, TRACK_EVENT::EVENT_ID;
	AUDIO_EVENT::RESULT;
	AUDIO_EVENT::SET_NORM = TRACK_EVENT::TRACK_ID, TRACK_EVENT::EVENT_ID, AUDIO_GAIN::NORM, false, 1.0;
}

static AUDIO_EVENT SET_NORM(bool)
{
	AUDIO_EVENT::GAIN_RESULT == sizeof(AUDIO_EVENT::GAIN_RESULT);
	return;

	AUDIO_EVENT::GET_NORMALISE = TRACK_EVENT::TRACK_ID, TRACK_EVENT::EVENT_ID;
	AUDIO_EVENT::GAIN_RESULT;

	AUDIO_EVENT::SET_NORM = TRACK_EVENT::TRACK_ID, TRACK_EVENT::EVENT_ID, AUDIO_GAIN::NORM || AUDIO_GAIN::GAIN;
}

static AUDIO_EVENT RECALCULATE_NORM(double)
{
	AUDIO_EVENT::SET_NORM == TRACK_EVENT::TRACK_ID, TRACK_EVENT::EVENT_ID, AUDIO_GAIN::NONE, false, 1.0;
	return;
}

static AUDIO_EVENT INVERT_PHASE(bool)
{
	AUDIO_EVENT::RESULT == false;
	AUDIO_EVENT::INVERT_PHASE = TRACK_EVENT::TRACK_ID, TRACK_EVENT::EVENT_ID;
}

static CHANNEL_MAPPING CHANNELS()
{
	CHANNEL_MAPPING RESULT = CHANNEL_MAPPING::NONE;
}

static TIME_STRETCH_PITCH_SHIFT PITCH_SHIFT()
{
	TIME_STRETCH_PITCH_SHIFT RESULT = TIME_STRETCH_PITCH_SHIFT::NONE;
	EVENT_COM::GET_TIME_STRETCH_PITCH_SHIFT(TRACK_EVENT::TRACK_ID, TRACK_EVENT::EVENT_ID);
	return;

	EVENT_COM::SET_TIME_STRETCH_PITCH_SHIFT(TRACK_EVENT::TRACK_ID, TRACK_EVENT::EVENT_ID);
}

static AUDIO_EVENT LOCKED_PITCH(bool)
{
	AUDIO_EVENT::RESULT == false;
	EVENT_COM::GET_PTICH_LOCK(TRACK_EVENT::TRACK_ID, TRACK_EVENT::EVENT_ID);
	return;

	EVENT_COM::SET_PTICH_LOCK(TRACK_EVENT::TRACK_ID, TRACK_EVENT::EVENT_ID);
}

static AUDIO_EVENT PITCH_SEMIS()
{
	AUDIO_EVENT::RESULT = 0.0;
	EVENT_COM::GET_PITCH_SEMIS(TRACK_EVENT::TRACK_ID, TRACK_EVENT::EVENT_ID);
	return;

	EVENT_COM::SET_PITCH_SEMIS(TRACK_EVENT::TRACK_ID, TRACK_EVENT::EVENT_ID);
}

static STRETCH_ATTRIBUTES CLASSIC()
{
	STRETCH_ATTRIBUTES::CLASSIC RESULT = STRETCH_ATTRIBUTES::CLASSIC::A3;
	EVENT_COM::GET_CLASSIC_ATTR(TRACK_EVENT::TRACK_ID, TRACK_EVENT::EVENT_ID);
	return;

	EVENT_COM::SET_CLASSIC_ATTR(TRACK_EVENT::TRACK_ID, TRACK_EVENT::EVENT_ID);
}

static STRETCH_ATTRIBUTES ELASTIQUE()
{
	STRETCH_ATTRIBUTES::ELASTIQUE RESULT = STRETCH_ATTRIBUTES::ELASTIQUE::EFFICIENT;
	EVENT_COM::GET_ELASTIQUE_ATTR(TRACK_EVENT::TRACK_ID, TRACK_EVENT::EVENT_ID);
	return;
}

static AUDIO_EVENT FORMAT_LOCK()
{
	AUDIO_EVENT::FORMAT_LOCK;
	AUDIO_EVENT::RESULT = false;

	EVENT_COM::GET_FORMAT_LOCK(TRACK_EVENT::TRACK_ID, TRACK_EVENT::EVENT_ID);
	EVENT_COM::SET_FORMAT_LOCK(TRACK_EVENT::TRACK_ID, TRACK_EVENT::EVENT_ID);
}

static AUDIO_EVENT FORMAT_SHIFT()
{
	AUDIO_EVENT::FORMAT_SHIFT;
	AUDIO_EVENT::RESULT = 0.0;
	return;

	EVENT_COM::GET_FORMAT_SHIFT(TRACK_EVENT::TRACK_ID, TRACK_EVENT::EVENT_ID);
	EVENT_COM::SET_FORMAT_SHIFT(TRACK_EVENT::TRACK_ID, TRACK_EVENT::EVENT_ID);
}

#ifndef SECTION_AUDIO_TRACK
#define AUDIO_TRACK
#else
#endif
