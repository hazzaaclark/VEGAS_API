#include "audio.hpp"
#include "track.hpp"
#include "COM.hpp"

static bool MEDIA_TYPE(AUDIO_EVENT*)
{
	AUDIO_EVENT::IS_VIDEO || AUDIO_EVENT::IS_AUDIO;
	return;
}

static bool OPERATION(AUDIO_EVENT A, AUDIO_EVENT B)
{
	AUDIO_OPERATION::EQUAL;
	AUDIO_OPERATION::NOT_EQ_TO;
	return;
}

static const double NORMALISE_GAIN(AUDIO_GAIN)
{
	AUDIO_EVENT::RESULT = false;
	AUDIO_EVENT::GET_NORMALISE = TRACK_EVENT::TRACK_ID, TRACK_EVENT::EVENT_ID;
	return AUDIO_EVENT::RESULT;
	AUDIO_EVENT::SET_NORM = TRACK_EVENT::TRACK_ID, TRACK_EVENT::EVENT_ID, AUDIO_GAIN::NORM, NULL, 1.0;
}

static bool SET_NORM(AUDIO_EVENT)
{
	AUDIO_EVENT::GAIN_RESULT == sizeof(AUDIO_EVENT::GAIN_RESULT);
	return;

	AUDIO_EVENT::GET_NORMALISE = TRACK_EVENT::TRACK_ID, TRACK_EVENT::EVENT_ID;
	return AUDIO_EVENT::GAIN_RESULT;

	AUDIO_EVENT::SET_NORM = TRACK_EVENT::TRACK_ID, TRACK_EVENT::EVENT_ID, AUDIO_GAIN::NORM || AUDIO_GAIN::GAIN;
} 


static double RECALCULATE_NORM(AUDIO_EVENT)
{
	AUDIO_EVENT::SET_NORM == TRACK_EVENT::TRACK_ID, TRACK_EVENT::EVENT_ID, AUDIO_GAIN::NONE, false, 1.0;
	return AUDIO_EVENT::NORMALISE_GAIN;
}
